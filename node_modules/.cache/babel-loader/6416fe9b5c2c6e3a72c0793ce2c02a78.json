{"ast":null,"code":"var _jsxFileName = \"/home/vitoria/Documents/trybe/projetos/github calvitoria/calvitoria-sound/src/pages/Search.js\";\nimport React from 'react';\nimport Header from './components/Header';\nimport Loading from './components/Loading';\nimport searchAlbumsAPI from '../services/searchAlbumsAPI';\nimport AlbumPreview from './components/AlbumPreview';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass Search extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      searchField: '',\n      isSearchBtnDisabled: true,\n      loadingText: true,\n      returnedList: [],\n      isReturnEmpty: false\n    };\n\n    this.validateSearchBtn = () => {\n      const {\n        searchField\n      } = this.state;\n      const min = 2;\n\n      if (searchField.length >= min) {\n        this.setState({\n          isSearchBtnDisabled: false\n        });\n      } else {\n        this.setState({\n          isSearchBtnDisabled: true\n        });\n      }\n    };\n\n    this.handleChange = _ref => {\n      let {\n        target: {\n          value,\n          name\n        }\n      } = _ref;\n      this.setState({\n        [name]: value\n      }, this.validateSearchBtn);\n    };\n\n    this.isReturnEmpty = () => {\n      const {\n        returnedList\n      } = this.state;\n\n      if (returnedList.length === 0) {\n        this.setState({\n          isReturnEmpty: true\n        });\n      } else this.setState({\n        isReturnEmpty: false\n      });\n    };\n\n    this.onClickSearchBtn = async () => {\n      const {\n        searchField\n      } = this.state;\n      this.setState({\n        loadingText: false\n      });\n      const returnAPI = await searchAlbumsAPI(searchField);\n      this.setState({\n        returnedList: returnAPI,\n        loadingText: true\n      }, this.isReturnEmpty);\n    };\n  }\n\n  render() {\n    const {\n      searchField,\n      isSearchBtnDisabled,\n      loadingText,\n      returnedList,\n      isReturnEmpty\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      \"data-testid\": \"page-search\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 7\n      }, this), loadingText ? /*#__PURE__*/_jsxDEV(\"form\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"searchField\",\n          children: [\"Search\", /*#__PURE__*/_jsxDEV(\"input\", {\n            name: \"searchField\",\n            onChange: this.handleChange,\n            id: \"searchField\",\n            type: \"text\",\n            \"data-testid\": \"search-artist-input\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          disabled: isSearchBtnDisabled,\n          onClick: this.onClickSearchBtn,\n          type: \"button\",\n          \"data-testid\": \"search-artist-button\",\n          children: \"Pesquisar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 13\n      }, this), isReturnEmpty ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Nenhum \\xE1lbum foi encontrado\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: `Resultado de álbuns de: ${searchField}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ol\", {\n          children: returnedList.flatMap(obj => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(AlbumPreview, { ...obj\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 19\n            }, this)\n          }, obj.collectionId, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 5\n    }, this);\n  }\n\n}\n\nexport default Search;","map":{"version":3,"sources":["/home/vitoria/Documents/trybe/projetos/github calvitoria/calvitoria-sound/src/pages/Search.js"],"names":["React","Header","Loading","searchAlbumsAPI","AlbumPreview","Search","Component","state","searchField","isSearchBtnDisabled","loadingText","returnedList","isReturnEmpty","validateSearchBtn","min","length","setState","handleChange","target","value","name","onClickSearchBtn","returnAPI","render","flatMap","obj","collectionId"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Header from './components/Header';\nimport Loading from './components/Loading';\nimport searchAlbumsAPI from '../services/searchAlbumsAPI';\nimport AlbumPreview from './components/AlbumPreview';\n\nclass Search extends React.Component {\n  state = {\n    searchField: '',\n    isSearchBtnDisabled: true,\n    loadingText: true,\n    returnedList: [],\n    isReturnEmpty: false,\n  }\n\n  // função que valida se o botão deve ser habilitado ou não (2 ou mais caracteres)\n  validateSearchBtn = () => {\n    const { searchField } = this.state;\n    const min = 2;\n    if (searchField.length >= min) {\n      this.setState({ isSearchBtnDisabled: false });\n    } else {\n      this.setState({ isSearchBtnDisabled: true });\n    }\n  }\n\n  // função para atualizar o estado a medida que o input de search muda. adasd\n  handleChange = ({ target: { value, name } }) => {\n    this.setState({ [name]: value }, this.validateSearchBtn);\n  }\n\n// função que verifica se array retornado da api é vazio\nisReturnEmpty = () => {\n  const { returnedList } = this.state;\n  if (returnedList.length === 0) {\n    this.setState({ isReturnEmpty: true });\n  } else this.setState({ isReturnEmpty: false });\n}\n\n// função onclick para fazer a requisição e limpar input\nonClickSearchBtn = async () => {\n  const { searchField } = this.state;\n  this.setState({ loadingText: false });\n  const returnAPI = await searchAlbumsAPI(searchField);\n  this.setState({\n    returnedList: returnAPI,\n    loadingText: true }, this.isReturnEmpty);\n}\n\nrender() {\n  const { searchField, isSearchBtnDisabled, loadingText,\n    returnedList, isReturnEmpty } = this.state;\n  return (\n    <div data-testid=\"page-search\">\n      <Header />\n      {\n        loadingText ? (\n          <form>\n            <label htmlFor=\"searchField\">\n              Search\n              <input\n                name=\"searchField\"\n                onChange={ this.handleChange }\n                id=\"searchField\"\n                type=\"text\"\n                data-testid=\"search-artist-input\"\n              />\n            </label>\n            <button\n              disabled={ isSearchBtnDisabled }\n              onClick={ this.onClickSearchBtn }\n              type=\"button\"\n              data-testid=\"search-artist-button\"\n            >\n              Pesquisar\n            </button>\n          </form>\n        ) : <Loading />\n      }\n      {\n        isReturnEmpty ? (\n          <p>Nenhum álbum foi encontrado</p>\n        ) : (\n          <>\n            <h4>{`Resultado de álbuns de: ${searchField}`}</h4>\n            <ol>\n              {returnedList.flatMap((obj) => (\n                <li key={ obj.collectionId }>\n                  <AlbumPreview { ...obj } />\n                </li>\n              ))}\n            </ol>\n          </>\n        )\n      }\n\n    </div>\n  );\n}\n}\n\nexport default Search;\n"]},"metadata":{},"sourceType":"module"}